{"version":3,"sources":["draw_line_string_snap.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["DrawLineStringSnap","toDisplayFeatures","state","geojson","display","DrawLineString","call","this","currentVertexPosition","createVertex","line","id","geometry","coordinates","concat","onSetup","options","onClick","e","onMouseMove","_this","bbox","point","x","y","eCoords","lngLat","toArray","features","map","queryRenderedFeatures","console","log","nearby","feature","type","ruler","cheapRuler","fromTile","_vectorTileFeature","_y","result","pointOnLine","distance","project","closest","filter","sort","length","lng","lat","onKeyUp","onTap","onStop","onTrash","clickAnywhere","clickOnVertex","StyledMap","styled","div","_templateObject","DEFAULT_LAYER","source","data","paint","line-width","line-color","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","mapRef","mapDrawTool","onReferenceMap","element","initializeMap","mapboxgl","container","style","center","zoom","MapboxDraw","modes","objectSpread","draw_line_string","controls","line_string","displayControlsDefault","addControl","on","loadGeoJSON","addLayer","react_default","a","createElement","ref","Component","Boolean","window","location","hostname","match","descriptor","getOwnPropertyDescriptor","set","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10cd71ce.chunk.js","sourcesContent":["import DrawLineString from '@mapbox/mapbox-gl-draw/src/modes/draw_line_string';\nimport createVertex from '@mapbox/mapbox-gl-draw/src/lib/create_vertex';\nimport cheapRuler from 'cheap-ruler';\n\nconst DISTANCE_FROM_MOUSE = 10;\n\nconst DrawLineStringSnap = {\n  toDisplayFeatures(state, geojson, display) {\n    DrawLineString.toDisplayFeatures.call(this, state, geojson, display);\n\n    if (state.currentVertexPosition > 0) {\n      display(createVertex(\n        state.line.id,\n        geojson.geometry.coordinates[state.currentVertexPosition],\n        `${state.currentVertexPosition}`,\n        true\n      ));\n    }\n  },\n\n  onSetup(options) {\n    return DrawLineString.onSetup.call(this, options);\n  },\n\n  onClick(state, e) {\n    DrawLineString.onClick.call(this, state, e);\n  },\n\n  onMouseMove(state, e) {\n    const bbox = [\n      [e.point.x - DISTANCE_FROM_MOUSE, e.point.y - DISTANCE_FROM_MOUSE],\n      [e.point.x + DISTANCE_FROM_MOUSE, e.point.y + DISTANCE_FROM_MOUSE]\n    ];\n\n    const eCoords = e.lngLat.toArray();\n    const features = this.map.queryRenderedFeatures(bbox);\n    console.log('queryRenderedFeatures', features);\n\n    const nearby = features\n      .map((feature) => {\n        const { type } = feature.geometry;\n        if (type === 'Polygon' || type === 'LineString') {\n          const coordinates = type === 'Polygon' ? feature.geometry.coordinates[0] : feature.geometry.coordinates;\n          const ruler = cheapRuler.fromTile(feature._vectorTileFeature._y, 20);\n          const result = ruler.pointOnLine(coordinates, eCoords);\n          if (result.point && result.point[0]) {\n            console.log('pointOnLine', result);\n            const distance = ruler.distance(result.point, eCoords);\n            feature.point = this.map.project(result.point);\n            feature.closest = result.point;\n            feature.distance = distance;\n          }\n        }\n        return feature;\n      })\n      .filter((feature) => {\n        const { point } = feature;\n        if (!point) return false;\n        return (point.x > bbox[0][0] && point.x < bbox[1][0] && point.y > bbox[0][1] && point.y < bbox[1][1])\n      })\n      .sort((feature) => {\n        return feature.distance;\n      });\n\n    if (nearby && nearby.length) {\n      e.point.x = nearby[0].point.x;\n      e.point.y = nearby[0].point.y;\n      e.lngLat.lng = nearby[0].closest[0];\n      e.lngLat.lat = nearby[0].closest[1];\n      console.log('Snapping to:', nearby);\n    }\n\n    DrawLineString.onMouseMove.call(this, state, e);\n  },\n  \n  onKeyUp(state, e) {\n    DrawLineString.onKeyUp.call(this, state, e);\n  },\n\n  onTap(state, e) {\n    DrawLineString.onTap.call(this, state, e);\n  },\n\n  onStop(state, e) {\n    DrawLineString.onStop.call(this, state, e);\n  },\n\n  onTrash(state, e) {\n    DrawLineString.onTrash.call(this, state, e);\n  },\n\n  clickAnywhere(state, e) {\n    return DrawLineString.clickAnywhere.call(this, state, e);\n  },\n\n  clickOnVertex(state) {\n    return DrawLineString.clickOnVertex.call(this, state);\n  }\n}\n\nexport default DrawLineStringSnap;","import * as mapboxgl from 'mapbox-gl';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport React, { Component } from 'react';\nimport DrawLineStringSnap from './draw_line_string_snap';\nimport { FeatureCollection } from 'geojson';\nimport styled from 'styled-components';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst StyledMap = styled.div`\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst DEFAULT_LAYER: mapboxgl.Layer = {\n  id: 'us-zipcodes',\n  type: 'line',\n  source: {\n    type: 'geojson',\n    data: 'https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json',\n  },\n  paint: {\n    'line-width': 2,\n    'line-color': '#3bb2d0',\n  }\n};\n\nclass App extends Component {\n  private mapRef: Element | null;\n  private map: mapboxgl.Map | null;\n  private mapDrawTool: any;\n\n  constructor(props: any) {\n    super(props);\n    this.mapRef = null;\n    this.map = null;\n    this.mapDrawTool = null;\n  }\n\n  private onReferenceMap = (element: HTMLDivElement) => {\n    this.mapRef = element;\n  }\n\n  private initializeMap = () => {\n    if (!this.mapRef) return;\n    this.map = new mapboxgl.Map({\n      container: this.mapRef,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [-97, 35],\n      zoom: 4,\n    });\n    this.mapDrawTool = new MapboxDraw({\n      modes: {\n        ...MapboxDraw.modes,\n        draw_line_string: DrawLineStringSnap\n      },\n      controls: {\n        line_string: true,\n      },\n      displayControlsDefault: false,\n    });\n    this.map.addControl(this.mapDrawTool);\n    this.map.on('load', this.loadGeoJSON);\n  }\n\n  private loadGeoJSON = () => {\n    if (!this.map) return;\n    this.map.addLayer(DEFAULT_LAYER);\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  render() {\n    return (\n      <StyledMap id=\"map-container\" ref={this.onReferenceMap}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as mapboxgl from 'mapbox-gl';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst descriptor = Object.getOwnPropertyDescriptor(mapboxgl, \"accessToken\");\nif (descriptor && descriptor.set) {\n  descriptor.set('pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA');\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}